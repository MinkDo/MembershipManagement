package com.example.membershipmanagement.data.repository

import android.util.Log
import com.example.membershipmanagement.data.remote.ApiService
import com.example.membershipmanagement.utils.UserPreferences
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.HttpException

data class FinanceResponse(
    val statusCode: Int,
    val message: String?,
    val errors: Any?,
    val data: FinanceData?
)

data class FinanceData(
    val currentPage: Int,
    val pageSize: Int,
    val pageCount: Int,
    val totalItemCount: Int,
    val hasPrevious: Boolean,
    val hasNext: Boolean,
    val items: List<Finance>
)

data class Finance(
    val id: Int,
    val type: Int,  // 0: Thu, 1: Chi
    val category: String,
    val amount: Int,
    val transactionDate: String,  // ISO-8601 Format
    val description: String?,
    val createdAt: String
)

class FinanceRepository(private val apiService: ApiService, private val userPreferences: UserPreferences) {

    // üìå L·∫•y danh s√°ch giao d·ªãch t√†i ch√≠nh c√≥ b·ªô l·ªçc
    suspend fun getFilteredFinances(page: Int, size: Int, type: Int?, start: String?, end: String?): Result<List<Finance>> {
        return withContext(Dispatchers.IO) {
            try {
                val token = userPreferences.getToken()
                if (token.isNullOrEmpty()) {
                    return@withContext Result.failure(Exception("L·ªói: Token kh√¥ng h·ª£p l·ªá"))
                }

                val response = apiService.getFilteredFinances("Bearer $token", page, size, type, start, end)
                if (response.isSuccessful) {
                    val finances = response.body()?.data?.items ?: emptyList()
                    Result.success(finances)
                } else {
                    val errorMessage = response.errorBody()?.string() ?: "L·ªói API kh√¥ng x√°c ƒë·ªãnh"
                    Result.failure(Exception("L·ªói API: ${response.code()} - $errorMessage"))
                }
            } catch (e: HttpException) {
                Result.failure(Exception("L·ªói HTTP: ${e.message}"))
            } catch (e: Exception) {
                Result.failure(Exception("L·ªói k·∫øt n·ªëi: ${e.message}"))
            }
        }
    }

    suspend fun deleteFinance(id: Int): Result<String> {
        return withContext(Dispatchers.IO) {
            try {
                val token = userPreferences.getToken() ?: return@withContext Result.failure(Exception("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"))
                val response = apiService.deleteFinance("Bearer $token", id)
                val responseBody = response.body()

                return@withContext if (responseBody?.statusCode == 200) {
                    Log.d("FinanceRepository", "X√≥a Achievement th√†nh c√¥ng")
                    Result.success("Finance ƒë√£ ƒë∆∞·ª£c x√≥a!")
                } else {
                    Log.e("FinanceRepository", "L·ªói khi x√≥a s·ª± ki·ªán: ${responseBody?.message ?: "Kh√¥ng r√µ l·ªói"}")
                    Result.failure(Exception(responseBody?.message ?: "L·ªói khi x√≥a s·ª± ki·ªán"))
                }
            } catch (e: Exception) {
                Log.e("FinanceRepository", "L·ªói k·∫øt n·ªëi: ${e.message}")
                Result.failure(Exception("L·ªói k·∫øt n·ªëi: ${e.message}"))
            }
        }
    }

}
