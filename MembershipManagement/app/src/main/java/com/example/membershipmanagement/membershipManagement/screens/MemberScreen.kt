package com.example.membershipmanagement.membershipManagement.screens

import UserViewModel
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.membershipmanagement.membershipManagement.components.MemberItem
import com.example.membershipmanagement.navigation.Screen
import com.example.membershipmanagement.viewmodel.ProfileViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch


@Composable
fun MemberScreen(
    navController: NavController,
    userViewModel: UserViewModel,
    profileViewModel: ProfileViewModel,
) {
    val uiState by userViewModel.uiState.collectAsState()
    val members = uiState.users
    val coroutineScope = rememberCoroutineScope()
    // ‚úÖ G·ªçi API khi m·ªü m√†n h√¨nh
    LaunchedEffect(Unit) {
        userViewModel.filterUsers()
    }

    Scaffold(
        topBar = { MemberTopBar(navController) }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
        ) {
            // Thanh t√¨m ki·∫øm
            OutlinedTextField(
                value = uiState.searchQuery,
                onValueChange = { userViewModel.updateSearchQuery(it) },
                label = { Text("T√¨m ki·∫øm theo t√™n") },
                modifier = Modifier.fillMaxWidth()
            )


            Spacer(modifier = Modifier.height(8.dp))

            // Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu ho·∫∑c l·ªói
            when {
                uiState.isLoading -> CircularProgressIndicator()
                uiState.errorMessage.isNotEmpty() -> Text("L·ªói: ${uiState.errorMessage}", color = MaterialTheme.colorScheme.error)
                members.isEmpty() -> Text("Kh√¥ng c√≥ h·ªôi vi√™n n√†o", modifier = Modifier.padding(16.dp))
                else -> {
                    LazyColumn {
                        items(members) { member ->
                            MemberItem(
                                member = member,
                                onEdit = {
                                    coroutineScope.launch {
                                        profileViewModel.getUserById(member.id) // üåü Ch·ªù API ho√†n t·∫•t
                                        delay(1000)
                                        navController.navigate(Screen.EditProfile.route) // ‚úÖ Ch·ªâ ƒëi·ªÅu h∆∞·ªõng sau khi API ho√†n t·∫•t
                                    } },
                                onDelete = { userViewModel.deleteUser(member.id) },
                                onclick = { coroutineScope.launch {
                                    profileViewModel.getUserById(member.id) // üåü Ch·ªù API ho√†n t·∫•t
                                    delay(1000)
                                    navController.navigate(Screen.Profile.route) // ‚úÖ Ch·ªâ ƒëi·ªÅu h∆∞·ªõng sau khi API ho√†n t·∫•t
                                } }
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun FilterRow(
    selectedGender: String,
    onGenderSelected: (String) -> Unit,
    selectedBelt: String,
    onBeltSelected: (String) -> Unit,
    selectedStatus: String,
    onStatusSelected: (String) -> Unit
) {
    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
        DropdownFilter("Gi·ªõi t√≠nh", listOf("T·∫•t c·∫£", "Nam", "N·ªØ"), selectedGender, onGenderSelected)
        DropdownFilter("C·∫•p ƒëai", listOf("T·∫•t c·∫£", "Tr·∫Øng", "V√†ng", "Xanh", "ƒê·ªè", "ƒêen"), selectedBelt, onBeltSelected)
        DropdownFilter("Tr·∫°ng th√°i", listOf("T·∫•t c·∫£", "ƒêang ho·∫°t ƒë·ªông", "Ng·ª´ng tham gia"), selectedStatus, onStatusSelected)
    }
}

@Composable
fun DropdownFilter(title: String, options: List<String>, selectedOption: String, onOptionSelected: (String) -> Unit) {
    var expanded by remember { mutableStateOf(false) }

    Column {
        Text(title, style = MaterialTheme.typography.bodySmall)
        Button(onClick = { expanded = true }) {
            Text(selectedOption)
        }
        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
            options.forEach { option ->
                DropdownMenuItem(
                    text = { Text(option) },
                    onClick = {
                        onOptionSelected(option) // ‚úÖ C·∫≠p nh·∫≠t gi√° tr·ªã
                        expanded = false // ‚úÖ ƒê√≥ng dropdown
                    }
                )
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MemberTopBar(navController: NavController) {
    TopAppBar(
        title = { Text("Qu·∫£n l√Ω h·ªôi vi√™n", style = MaterialTheme.typography.titleLarge) },
        navigationIcon = {
            IconButton(onClick = { navController.popBackStack() }) { // ‚úÖ Fix l·ªói kh√¥ng th·ªÉ quay l·∫°i
                Icon(imageVector = Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Quay l·∫°i")
            }
        }
    )
}
